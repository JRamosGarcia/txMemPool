version: "3"
services:
  
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
#    ports:
#    - "2181:2181"
    networks:
      bitnet:
        ipv4_address: ${ZOOKEEPER_IP_ADDRESS}
  
  kafka1:
    image: wurstmeister/kafka
    container_name: kafka1
#    ports:
#    - "9092:9092"
    environment:
      BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_LOG_DIRS: /tmp/kafka-logs
      KAFKA_LISTENERS: PLAINTEXT://${KAFKA1_IP_ADDRESS}:${KAFKA1_PORT}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_CREATE_TOPICS: ${TOPIC_MEMPOOL_TX_EVENTS}:1:1
      KAFKA_MESSAGE_MAX_BYTES: 4000000
#fetch.message.max.bytes
#replica.fetch.max.bytes
#max.message.bytes
#message.max.bytes
      
    networks:
      bitnet:
        ipv4_address: ${KAFKA1_IP_ADDRESS}
    volumes:
      - kafka_data_volume1:/tmp/kafka-logs
#      - /var/run/docker.sock:/var/run/docker.sock # Esto no deberia ponerse, 
    depends_on:
      - zookeeper
  
  configuration_server:
    image: ${REGISTRY_HOST}/configuration_server:latest
    container_name: configuration_server 
#    ports:
#      - "8888:8888"
    environment:
      server.port: ${CONFIGURATION_SERVER_PORT}
    networks:
      bitnet:
        ipv4_address: ${CONFIGURATION_SERVER_IP_ADDRESS}
    volumes:
      - configuration_server_volume:/tmp
            
  service_discovery:
    image: ${REGISTRY_HOST}/service_discovery:latest
    container_name: service_discovery 
#    ports:
#      - "8761:8761"
    networks:
      bitnet:
        ipv4_address: ${SERVICE_DISCOVERY_IP_ADDRESS}
    volumes:
      - service_discovery_volume:/tmp
    
  mongo1:
    image: mongo:latest
    container_name: mongo1
#    ports:
#     - "27017:27017"
    networks:
      bitnet:
       ipv4_address: ${MONGO_1_IP_ADDRESS}
    volumes:
      - mongodb_data_volume1:/data/db

#  mongo2:
#    image: mongo:latest
#    container_name: mongo2
##    ports:
##      - "27017:27017"
#    networks:
#      bitnet:
#       ipv4_address: ${MONGO_2_IP_ADDRESS}
#    volumes:
#      - mongodb_data_volume2:/data/db

  bitcoind_adapter1:
    image: ${REGISTRY_HOST}/bitcoind_adapter:latest
    container_name: bitcoind_adapter1 
#    ports:
#      - "8080:8080"
#      - "8081:8081"
    environment:
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000"
      spring.cloud.config.enabled: "true"
      spring.cloud.config.fail-fast: "true"
      spring.cloud.config.uri: http://${CONFIGURATION_SERVER_IP_ADDRESS}:${CONFIGURATION_SERVER_PORT}
      eureka.client.serviceUrl.defaultZone: http://${SERVICE_DISCOVERY_IP_ADDRESS}:${SERVICE_DISCOVERY_PORT}/eureka/
      spring.data.mongodb.uri: mongodb://${MONGO_1_IP_ADDRESS}:${MONGO_1_PORT}/memPool
      bitcoind.host: ${BITCOIND_HOST_IP_ADDRESS}
      bitcoind.port: ${BITCOIND_PORT}
      server.port: ${BITCOIND_1_ADAPTER_PORT}
      spring.cloud.stream.kafka.binder.zkNodes: ${ZOOKEEPER_IP_ADDRESS}
      spring.cloud.stream.kafka.binder.brokers: ${KAFKA1_IP_ADDRESS}      
    networks:
      bitnet:
       ipv4_address: ${BITCOIND_1_ADAPTER_IP_ADDRESS}
    restart: on-failure
    depends_on:
      - mongo1
      - configuration_server
      - service_discovery
    volumes:
      - bitcoindAdapter1_volume:/tmp

#  bitcoind_adapter2:
#    image: ${REGISTRY_HOST}/bitcoind_adapter:latest
#    container_name: bitcoind_adapter2 
##   ports:
##      - "8082:8080"
##      - "8083:8081"
#    environment:
#      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000"
#      spring.cloud.config.enabled: "true"
#      spring.cloud.config.fail-fast: "true"
#      spring.cloud.config.uri: http://${CONFIGURATION_SERVER_IP_ADDRESS}:${CONFIGURATION_SERVER_PORT}
#      eureka.client.serviceUrl.defaultZone: http://${SERVICE_DISCOVERY_IP_ADDRESS}:${SERVICE_DISCOVERY_PORT}/eureka/
#      spring.data.mongodb.uri: mongodb://${MONGO_2_IP_ADDRESS}:${MONGO_2_PORT}/memPool
#      bitcoind.host: ${BITCOIND_HOST_IP_ADDRESS}
#      bitcoind.port: ${BITCOIND_PORT}
#      server.port: ${BITCOIND_2_ADAPTER_PORT}
#      spring.cloud.stream.kafka.binder.zkNodes: ${ZOOKEEPER_IP_ADDRESS}
#      spring.cloud.stream.kafka.binder.brokers: ${KAFKA1_IP_ADDRESS}      
#    networks:
#      bitnet:
#       ipv4_address: ${BITCOIND_2_ADAPTER_IP_ADDRESS}
#    restart: on-failure
#    depends_on:
#      - mongo2
#      - configuration_server
#      - service_discovery
#    volumes:
#      - bitcoindAdapter2_volume:/tmp


  tx_mempool:
    image: ${REGISTRY_HOST}/tx_mempool:latest
    container_name: tx_mempool
#    ports:
#      - "8084:8080"
#      - "8085:8081"
    environment:
       JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000"
       spring.cloud.config.enabled: "true"
       spring.cloud.config.fail-fast: "true"
       spring_cloud_config_uri: http://${CONFIGURATION_SERVER_IP_ADDRESS}:${CONFIGURATION_SERVER_PORT}
       eureka.client.serviceUrl.defaultZone: http://${SERVICE_DISCOVERY_IP_ADDRESS}:${SERVICE_DISCOVERY_PORT}/eureka/
       management.server.port: ${TX_MEMPOOL_MANAGEMENT_PORT}
       server.port: ${TX_MEMPOOL_PORT}
       spring.cloud.stream.kafka.binder.zkNodes: ${ZOOKEEPER_IP_ADDRESS}
       spring.cloud.stream.kafka.binder.brokers: ${KAFKA1_IP_ADDRESS}      
    networks:
      bitnet:
       ipv4_address: ${TX_MEMPOOL_IP_ADDRESSS}
    restart: on-failure
    depends_on:
#      - mongo
      - configuration_server
      - service_discovery
#TODO: Hay que volver a poner esto
#      - bitcoind_adapter1
#      - bitcoind_adapter2
    volumes:
      - tx_mempool_volume:/tmp
  
  mempool_recorder:
    image: ${REGISTRY_HOST}/mempool_recorder:latest
    container_name: mempool_recorder
    environment:
       JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000"
       spring.cloud.config.enabled: "true"
       spring.cloud.config.fail-fast: "true"
       spring_cloud_config_uri: http://${CONFIGURATION_SERVER_IP_ADDRESS}:${CONFIGURATION_SERVER_PORT}
       eureka.client.serviceUrl.defaultZone: http://${SERVICE_DISCOVERY_IP_ADDRESS}:${SERVICE_DISCOVERY_PORT}/eureka/
       management.server.port: ${MEMPOOL_RECORDER_MANAGEMENT_PORT}
       server.port: ${MEMPOOL_RECORDER_PORT}
       spring.cloud.stream.kafka.binder.zkNodes: ${ZOOKEEPER_IP_ADDRESS}
       spring.cloud.stream.kafka.binder.brokers: ${KAFKA1_IP_ADDRESS}      
    networks:
      bitnet:
       ipv4_address: ${MEMPOOL_RECORDER_IP_ADDRESSS}
    restart: on-failure
    depends_on:
#      - mongo
      - configuration_server
      - service_discovery
#TODO: Hay que volver a poner esto
#      - bitcoind_adapter1
#      - bitcoind_adapter2
    volumes:
      - mempool_recorder_volume:/tmp
    
  
  gateway_service:
    image: ${REGISTRY_HOST}/gateway_service:latest
    container_name: gateway_service
    networks:
      bitnet:
       ipv4_address: ${GATEWAY_SERVICE_IP_ADDRESS}
    restart: on-failure
#TODO: Hay que volver a poner esto
#    depends_on:
#      - configuration_server
#      - service_discovery
#      - bitcoind_adapter1
#      - bitcoind_adapter2
#      - tx_mempool
    volumes:
      - gateway_service_volume:/tmp
       
networks:
  bitnet:
    driver: bridge
    ipam:
      config:
        - subnet:  172.18.0.0/16
#        - gateway: 172.18.0.1
volumes:
  mongodb_data_volume1:
#  mongodb_data_volume2:
  kafka_data_volume1:
  kafka_data_volume2:
  kafka_data_volume3:
  bitcoindAdapter1_volume:
#  bitcoindAdapter2_volume:
  tx_mempool_volume:
  mempool_recorder_volume:
  configuration_server_volume:
  service_discovery_volume:
  gateway_service_volume: